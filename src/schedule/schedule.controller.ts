import {
	Body,
	Controller,
	Delete,
	Get,
	HttpCode,
	HttpException,
	HttpStatus,
	Param,
	Patch,
	Post,
	UsePipes,
	ValidationPipe,
} from '@nestjs/common';
import { ScheduleService } from './schedule.service';
import { SheduleDto } from './dto/shedule.dto';
import { ROOM_BOOKED, SHEDULE_NOT_FOUND } from './constant/message';
import { ROOM_NOT_FOUND } from 'src/rooms/constant/message';
import { ValidateObjectIdPipe } from './pipe/validateObjectIdPipe';
import { Roles } from 'src/decorators/user-role.decorator';
import { UserRole } from 'src/user/type/userRole.enum';
import { TelegramService } from 'src/telegram/telegram.service';
@Controller('schedule')
export class ScheduleController {
	constructor(
		private readonly sheduleService: ScheduleService,
		private readonly telegramService: TelegramService,
	) {}

	@UsePipes(new ValidationPipe({ whitelist: true, forbidNonWhitelisted: true }))
	@Post('create')
	@HttpCode(201)
	async create(@Body() dto: SheduleDto) {
		const isOccupied = await this.sheduleService.isRoomOccupied(dto.roomId, dto.time);
		if (isOccupied === 'ROOM_NOT_FOUND') {
			throw new HttpException(ROOM_NOT_FOUND, HttpStatus.NOT_FOUND);
		}

		if (isOccupied) {
			throw new HttpException(ROOM_BOOKED, HttpStatus.CONFLICT);
		}
		const shedule = await this.sheduleService.create(dto);

		if (!shedule._id) {
			throw new HttpException('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è', HttpStatus.INTERNAL_SERVER_ERROR);
		}
		const populatedShedule = await this.sheduleService.getOne(
			shedule._id.toString(),
			'roomId userId',
		);

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
		if (!populatedShedule?.userId || !populatedShedule?.roomId) {
			throw new HttpException(
				'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
				HttpStatus.INTERNAL_SERVER_ERROR,
			);
		}

		const message =
			`üìÖ *–ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ* \n` +
			`üë§ *–ò–º—è*: ${populatedShedule.userId.name}\n` +
			`üìû *–¢–µ–ª–µ—Ñ–æ–Ω*: ${populatedShedule.userId.telephone}\n` +
			`üìÜ *–î–∞—Ç–∞*: ${populatedShedule.time}\n` +
			`üè® *–ù–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã*: ${populatedShedule.roomId.number_room}\n` +
			`üìå *–°—Ç–∞—Ç—É—Å*: ${populatedShedule.status}`;

		await this.telegramService.sendMessage(message);
		return shedule;
	}

	@Get(':id')
	@HttpCode(200)
	async get(@Param('id', ValidateObjectIdPipe) id: string) {
		const shedule = await this.sheduleService.getOne(id);

		if (!shedule) {
			throw new HttpException(SHEDULE_NOT_FOUND, HttpStatus.NOT_FOUND);
		}
		return shedule;
	}

	@Get('statistics/:month')
	@HttpCode(200)
	@Roles(UserRole.Admin)
	async getStatistic(@Param('month') month: string) {
		return await this.sheduleService.getStatistic(month);
	}

	@Delete(':id')
	@HttpCode(204)
	async delete(@Param('id', ValidateObjectIdPipe) id: string) {
		const deletedRoom = await this.sheduleService.deleteOne(id);

		if (!deletedRoom) {
			throw new HttpException(SHEDULE_NOT_FOUND, HttpStatus.NOT_FOUND);
		}

		const message =
			`‚ùå –û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n` +
			`üë§ –ò–º—è: ${deletedRoom.userId?.name ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n` +
			`üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${deletedRoom.userId?.telephone ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n` +
			`üìÖ –î–∞—Ç–∞: ${deletedRoom.time}\n` +
			`üè† –ù–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã: ${deletedRoom.roomId?.number_room ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n` +
			`üî¥ –°—Ç–∞—Ç—É—Å: ${deletedRoom.status}`;

		await this.telegramService.sendMessage(message);
	}

	@UsePipes(new ValidationPipe({ whitelist: true, forbidNonWhitelisted: true }))
	@Patch(':id')
	@HttpCode(200)
	async path(@Param('id', ValidateObjectIdPipe) id: string, @Body() dto: SheduleDto) {
		const updated = await this.sheduleService.update(id, dto);

		if (!updated) {
			throw new HttpException(SHEDULE_NOT_FOUND, HttpStatus.NOT_FOUND);
		}
		return updated;
	}
}
